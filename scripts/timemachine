#!/usr/local/munkireport/munkireport-python3
# Time Machine menu code by frogor, wrapped by tuxudo for MunkiReport

import subprocess
import os
import sys
import platform
import string

sys.path.insert(0, '/usr/local/munki')
sys.path.insert(0, '/usr/local/munkireport')

from munkilib import FoundationPlist
from Foundation import CFPreferencesCopyAppValue
from mac_alias import Alias # https://github.com/dmgbuild/mac_alias, 2022-12-05

def get_time_machine():
    
    # Create empty out dict
    out = {}
        
    # Add in preference values
    out["AlwaysShowDeletedBackupsWarning"] = get_pref_value('AlwaysShowDeletedBackupsWarning', 'com.apple.TimeMachine')
    out["AutoBackup"] = get_pref_value('AutoBackup', 'com.apple.TimeMachine')
    out["DiskLowWarningTime"] = str(get_pref_value('DiskLowWarningTime', 'com.apple.TimeMachine'))
    out["ExcludeByPath"] = get_pref_value('ExcludeByPath', 'com.apple.TimeMachine')
    out["HostUUIDs"] = get_pref_value('HostUUIDs', 'com.apple.TimeMachine')
    out["LastCompactTime"] = str(get_pref_value('LastCompactTime', 'com.apple.TimeMachine'))
    out["LastConfigurationTraceDate"] = get_pref_value('LastConfigurationTraceDate', 'com.apple.TimeMachine')
    out["LastDestinationID"] = get_pref_value('LastDestinationID', 'com.apple.TimeMachine')
    out["LocalizedDiskImageVolumeName"] = get_pref_value('LocalizedDiskImageVolumeName', 'com.apple.TimeMachine')
    out["MobileBackups"] = get_pref_value('MobileBackups', 'com.apple.TimeMachine')
    out["SkipSystemFiles"] = get_pref_value('SkipSystemFiles', 'com.apple.TimeMachine')
    out["SkipPaths"] = get_pref_value('SkipPaths', 'com.apple.TimeMachine')
    out["Destinations"] = get_pref_value('Destinations', 'com.apple.TimeMachine')
    try:
        out["bytes_available"] = str(out["Destinations"][0]["BytesAvailable"])
        out["bytes_used"] = str(out["Destinations"][0]["BytesUsed"])
    except:
        pass    
    
    # If less than 10.12 (Darwin 16), run legacy log collector
    if getDarwinVersion() < 16:
        # Get legacy informtion, only supported on 10.6-10.11
        from subprocess import Popen, PIPE
        stdout = Popen("/usr/bin/syslog -F '$((Time)(utc)) $Message' -k Sender com.apple.backupd -k Time ge -7d -k Message R '^(Backup|Starting).*'", shell=True, stdout=PIPE).stdout
        output = stdout.read()
        out['legacy_output'] = output.decode()
    else:
        out['legacy_output'] = "macOS 10.12+ not supported with legacy Time Machine log output"
        
    # Check if greater than 10.12 (Darwin 16) or higher and get data about APFS local snapshots
    if getDarwinVersion() > 16:
        cmd = ['/usr/bin/tmutil', 'listlocalsnapshotdates', '/']
        proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                        stdin=subprocess.PIPE,
                        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (output, unused_error) = proc.communicate()
        out['apfs_snapshots'] = output.decode()
    else:
        out['apfs_snapshots'] = ""

    # Process Destinations array to fill in missing data on Ventrua+
    if "Destinations" in out and "Destinations"[0] and "SnapshotDates" in out["Destinations"][0]:
        out['snapshot_count'] = len(out["Destinations"][0]["SnapshotDates"])
        out['latestSnapshotDate'] = str(out["Destinations"][0]["SnapshotDates"][out['snapshot_count']-1])
        out['earliest_snapshot_date'] = str(out["Destinations"][0]["SnapshotDates"][0])
  
    # Check if higher than 10.8 (Darwin 12) and lower than Ventura (Darwin 22) and extract extra data from Time Machine menu item. Extraction does not work on less than 10.8 (Darwin 12) or greater than Monterey (Darwin 21)
    if getDarwinVersion() > 12 and getDarwinVersion() < 22:

        # Get extra data from menu item. Thanks frogor!
        from Foundation import NSBundle
        TMMenu = NSBundle.bundleWithPath_('/System/Library/CoreServices/Menu Extras/TimeMachine.menu')
        AppleTMSettings = TMMenu.classNamed_('AppleTMSettings')

        try:
            settings = AppleTMSettings.sharedSettings()
            current_dest = settings.currentDestination()

        except:
            return out

        # Check to make sure Time Machine is enabled
        if str(current_dest) != "None":

            out['alias_volume_name'] = current_dest.aliasVolumeName()
            out['is_network_destination'] = str(current_dest.isNetworkDestination())
            out['network_url'] = str(current_dest.networkURL())
            out['mount_point'] = str(current_dest.mountPoint())
            out['volume_display_name'] = str(current_dest.volumeDisplayName())
            out['server_display_name'] = str(current_dest.serverDisplayName())
            out['time_capsule_display_name'] = str(current_dest.timeCapsuleDisplayName())
            out['latestSnapshotDate'] = str(current_dest.latestSnapshotDate())
            out['earliest_snapshot_date'] = str(current_dest.earliestSnapshotDate())
            out['snapshot_count'] = str(current_dest.snapshotCount())

            return out

        else:

            return out

    # Check if greater than Monterey (Darwin 21), parse the alias because the TimeMachine.menu doesn't have any we need anymore
    elif getDarwinVersion() > 21:

        # Process Destinations array to fill in missing data on Ventrua+
        if "Destinations" in out and "Destinations"[0] and "BackupAlias" in out["Destinations"][0]:
            tm_alias = Alias.from_bytes(out["Destinations"][0]["BackupAlias"])

            if tm_alias.volume.posix_path != None:
                out['mount_point'] = tm_alias.volume.posix_path

            if tm_alias.target.filename != None:
                out['alias_volume_name'] = tm_alias.target.filename

            if tm_alias.target.folder_name != None:
                out['volume_display_name'] = tm_alias.target.folder_name

            # Check if network destination
            if tm_alias.volume.network_mount_info != None:
                printable = set(string.printable)
                out['network_url'] = ''.join(filter(lambda x: x in printable, tm_alias.volume.network_mount_info.decode("utf-8", errors="ignore"))).replace("<cifs","")
                out['is_network_destination'] = "1"
            else:
                out['is_network_destination'] = "0"

            return out

        else:
            return out

    else:
        return out
    
def get_pref_value(key, domain):
    
    value = CFPreferencesCopyAppValue(key, domain)
    
    if(value is not None):
        return value
    elif(value is not None and len(value) == 0 ):
        return ""
    else:
        return ""
  
def getDarwinVersion():
    """Returns the Darwin version."""
    # Catalina -> 10.15.7 -> 19.6.0 -> 19
    # os_version_tuple = platform.mac_ver()[0].split('.')
    # return int(os_version_tuple[1])
    darwin_version_tuple = platform.release().split('.')
    return int(darwin_version_tuple[0]) 

def main():
    """Main"""

    # Remove old timemachine.sh script, if it exists
    if os.path.isfile(os.path.dirname(os.path.realpath(__file__))+'/timemachine.sh'):
        os.remove(os.path.dirname(os.path.realpath(__file__))+'/timemachine.sh')

    # Get results
    info = get_time_machine()
    
    # Write Time Machine results to cache file
    cachedir = '%s/cache' % os.path.dirname(os.path.realpath(__file__))
    output_plist = os.path.join(cachedir, 'timemachine.plist')
    FoundationPlist.writePlist(info, output_plist)

if __name__ == "__main__":
    main()
